package ru.karich.service

import org.springframework.stereotype.Service
import ru.karich.model.Room
import java.net.Socket
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.CopyOnWriteArrayList

@Service
class RoomService {

    private val rooms = ConcurrentHashMap<String, Room>()
    private val random = java.util.Random()

    /** –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º */
    fun createRoom(name: String): Room {
        val room = Room(
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ 6-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
            id = String.format("%06d", random.nextInt(1_000_000)),
            name = name,
            clientA = null,
            clientB = null,
            participants = CopyOnWriteArrayList()
        )
        rooms[room.id] = room
        return room
    }

    /** –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TCP –∏–ª–∏ WebSocket */
    fun joinRoom(
        id: String,
        socket: Socket? = null,
        ws: org.springframework.web.socket.WebSocketSession? = null,
        userName: String? = null
    ): Room? {
        val room = rooms[id] ?: return null

        socket?.let {
            if (room.clientA == null) room.clientA = it
            else if (room.clientB == null) room.clientB = it
        }

        ws?.let { session ->
            val name = userName ?: "Guest"
            if (room.participants.none { it.second.id == session.id }) {
                room.participants.add(Pair(name, session))
            }
        }

        return room
    }

    /** –û—Ç–∫–ª—é—á–µ–Ω–∏–µ TCP –∏–ª–∏ WebSocket, –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã */
    /** –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ */
    fun leaveRoom(id: String) {
        val room = rooms.remove(id) ?: return

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º TCP —Å–æ–∫–µ—Ç—ã
        listOfNotNull(room.clientA, room.clientB).forEach { socket ->
            try { socket.close() } catch (_: Exception) {}
        }
        room.clientA = null
        room.clientB = null

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket-—Å–µ—Å—Å–∏–∏
        room.participants.forEach { (_, session) ->
            try { if (session.isOpen) session.close() } catch (_: Exception) {}
        }
        room.participants.clear()

        println("üóë Room $id removed, all resources cleaned")
    }

    /** –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ WebSocket —Å –∏–º–µ–Ω–∞–º–∏ */
    fun listParticipants(id: String): List<String> {
        val room = rooms[id] ?: return emptyList()
        return room.participants.map { it.first }
    }
}
